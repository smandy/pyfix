#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.3 on Fri Feb 13 19:56:12 2009

import wx

import wx.lib.mixins.listctrl as listmix
import dataSource
import sys

import traceback

fix = dataSource.fix
columnGetters = [ ( lambda x: x.getHeaderFieldValue,  fix.SenderCompID )  ,
                  ( lambda x: x.getHeaderFieldValue,  fix.TargetCompID ),
                  ( lambda x: x.getHeaderFieldValue,  fix.MsgSeqNum   ),
                   #Below is a Bit of a kludge but all we want is message name so we introduce 'fake' indirection
                  ( lambda x: lambda y: x.MessageName , fix.MsgSeqNum   ),
                  ( lambda x: x.getFieldValue,        fix.ExecTransType   ),
                  ( lambda x: x.getFieldValue,        fix.Side        ),
                  ( lambda x: x.getFieldValue,        fix.Symbol      ),
                  ( lambda x: x.getFieldValue,        fix.LastShares  ),
                  ( lambda x: x.getHeaderFieldValue,  fix.SendingTime ),
                  ( lambda x: x.getFieldValue,        fix.ExecID      ),
                  ( lambda x: x.getFieldValue,        fix.OrderID     ),
                  ( lambda x: x.getFieldValue,        fix.ClOrdID     ),
                  ( lambda x: x.getFieldValue,        fix.LastPx      ) ]
# begin wxGlade: extracode
# end wxGlade

class FixWrapper(object):
    __slots__=['msg','getters']
    def __init__(self, msg, getters):
        self.msg     = msg
        self.getters = getters

    def __getitem__(self, x):
        getter, field = self.getters[x]
        ret =  getter(self.msg)(field)
        #print "Getitem %s %s" % (x, ret)
        return ret

#fixTags = [ ( lambda x: x.getFieldValue(

class FIXFieldValueList( wx.ListCtrl ):
    def __init__(self, *args, **kwargs):
        wx.ListCtrl.__init__(self, *args, **kwargs)
        self.InsertColumn( 0, "FieldName" )
        self.InsertColumn( 1, "Tag" )
        self.InsertColumn( 2, "Value" )
        
    def setMessage(self,msg):
        self.DeleteAllItems()
        allFields = msg.headerFields + msg.fields + msg.footerFields
        ic = self.GetItemCount()
        for i,field in enumerate(allFields):
            if i>=ic:
                idx = self.InsertStringItem( sys.maxint, msg.toFix() )
            self.SetStringItem(idx, 0, str(field.FieldName))
            self.SetStringItem(idx, 1, str( field.Tag) )
            self.SetStringItem(idx, 2, str(field.value) )
        for i in range( len(allFields), ic):
            self.DeleteItem(i)

class ListCtrlPanel(wx.Panel, listmix.ColumnSorterMixin):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ListCtrlPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.fieldList = FIXFieldValueList(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.onMessageSelected, self.list_ctrl_1)
        # end wxGlade
        listmix.ColumnSorterMixin.__init__(self, len(columnGetters) )

        for col, g_f in enumerate(columnGetters):
            field = g_f[1]
            self.list_ctrl_1.InsertColumn( col, field.FieldName )

        # WXPYTHON IN ACTION p415 :-)
        self.itemDataMap = {}
        for msg in dataSource.get( 1000, filterKlazz = [ fix.ExecutionReport ] ):
            #msg.dump()
            idx = self.list_ctrl_1.InsertStringItem( sys.maxint, msg.toFix() )
            for i, g_f in enumerate(columnGetters):
                getter, field = g_f
                val = str( getter( msg )(field) )
                self.list_ctrl_1.SetStringItem( idx, i, val)
                self.list_ctrl_1.SetItemData( idx, idx)
                w = FixWrapper( msg, columnGetters)
                self.itemDataMap[idx] = w
                #print field
                try:
                    #print "Entering..."
                    side = msg.getField( fix.Side)
                    #print side
                    if side==fix.Side.BUY:
                        self.list_ctrl_1.SetItemBackgroundColour( idx, wx.BLUE )
                    else:
                        self.list_ctrl_1.SetItemBackgroundColour( idx, wx.RED  )
                except:
                    traceback.print_exc()


        self.list_ctrl_1.SetColumnWidth(0, 120)
        for i in range(1, len(columnGetters) ):
            self.list_ctrl_1.SetColumnWidth( i, wx.LIST_AUTOSIZE )

        wx.lib.mixins.listctrl.ColumnSorterMixin.__init__( self, len(columnGetters) )
                
    def GetListCtrl(self):
        return self.list_ctrl_1

    def __set_properties(self):
        # begin wxGlade: ListCtrlPanel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ListCtrlPanel.__do_layout
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.list_ctrl_1, 3, wx.EXPAND, 0)
        sizer_2.Add(self.fieldList, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        # end wxGlade

    def onMessageSelected(self, event): # wxGlade: ListCtrlPanel.<event_handler>
        #print "Event handler `onMessageSelected' not implemented"
        #print event.GetIndex()
        wrapper = self.itemDataMap[ event.GetIndex() ]
        self.fieldList.setMessage(wrapper.msg)
        #event.Skip()

# end of class ListCtrlPanel

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.panel_1 = wx.Panel(self, -1)
        self.notebook_1_pane_1 = ListCtrlPanel(self.notebook_1, -1)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((923, 758))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "tab1")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

# end of class MainFrame

class App(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        self.frame_1 = MainFrame(None, -1, "")
        self.SetTopWindow(self.frame_1)
        self.frame_1.Show()
        #app.MainLoop()
        return True
    
if __name__ == "__main__":
    if 0:
        app = App()
    else:
        app = wx.PySimpleApp()
        wx.InitAllImageHandlers()
        frame_1 = MainFrame(None, -1, "")
        app.SetTopWindow(frame_1)
        frame_1.Show()
    
    app.MainLoop()
